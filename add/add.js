//- Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
// Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів
//
// {
//     id: 1,
//     name: 'Leanne Graham',
//     username: 'Bret',
//     email: 'Sincere@april.biz',
//     address: {
//         street: 'Kulas Light',
//         suite: 'Apt. 556',
//         city: 'Gwenborough',
//         zipcode: '92998-3874',
//         geo: {
//             lat: '-37.3159',
//             lng: '81.1496'
//         }
//     },
//     phone: '1-770-736-8031 x56442',
//     website: 'hildegard.org',
//     company: {
//         name: 'Romaguera-Crona',
//         catchPhrase: 'Multi-layered client-server neural-net',
//         bs: 'harness real-time e-markets'
//     }
// }
class AddUser {
    constructor(id, name, username, email, address, phone, website, company) {
        this.id = id;
        this.name = name;
        this.username = username;
        this.email = email;
        this.address = address;
        this.phone = phone;
        this.website = website;
        this.company = company;
    }
}

class Address {
    constructor(street, suite, city, zipcode, geo) {
        this.street = street;
        this.suite = suite;
        this.city = city;
        this.zipcode = zipcode;
        this.geo = geo;
    }
}

class Geo {
    constructor(lat, lng) {
        this.lat = lat;
        this.lng = lng;
    }
}

class Company {
    constructor(name, catchPhrase, bs) {
        this.name = name;
        this.catchPhrase = catchPhrase;
        this.bs = bs;
    }
}
let addUser1 = new AddUser(
    1,
    'name',
    'username',
    'email',
    new Address(
        'street',
        'suite',
        'city',
        1234,
        new Geo(111,222)
    ),
    '12344321',
    'website',
    new Company(
        'company name',
        'catch phrase',
        'bs'
    )
);


console.log(addUser1)


// -  Створити функцію конструктор / клас  який описує об'єкт тегу
// Поля :
//  -назва тегу ()
//  - опис його дій
//  - масив з атрибутами (2-3 атрибути максимум)
//  Кожен атрибут описати як окремий який буде містити
//  -назву атрибуту
//  -опис дії атрибуту
//  інформацію брати з htmlbook.ru
//  Приклад результуючого об'єкту
//    {
//         titleOfTag: 'area',
//         action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//         attrs: [
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//         {/*some props and values*/},
//         {/*...*/},
//         {/*...*/},
//         ]
//
//    }

class Tag {
    constructor(titleOfTag, action, attrs) {
        this.titleOfTag = titleOfTag;
        this.action = action;
        this.attrs = attrs;
    }
}

class Attribute {
    constructor(titleOfAttr, actionOfAttr) {
        this.titleOfAttr = titleOfAttr;
        this.actionOfAttr = actionOfAttr;
    }
}

// Таким чином описати теги
// -a

const a = new Tag(
        'a',
        'Тег <a> является одним из важных элементов HTML и предназначен для создания ссылок. В зависимости от' +
        ' присутствия атрибутов name или href тег <a> устанавливает ссылку или якорь. Якорем называется закладка внутри' +
        ' страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь,' +
        ' происходит переход к закладке внутри веб-страницы.' +
        'Для создания ссылки необходимо сообщить браузеру, что является ссылкой, а также указать адрес документа,' +
        ' на который следует сделать ссылку. В качестве значения атрибута href используется адрес документа ' +
        '(URL, Universal Resource Locator, универсальный указатель ресурсов), на который происходит переход.' +
        ' Адрес ссылки может быть абсолютным и относительным. Абсолютные адреса работают везде и всюду независимо' +
        ' от имени сайта или веб-страницы, где прописана ссылка. Относительные ссылки, как следует из их названия,' +
        ' построены относительно текущего документа или корня сайта.',
        [
            new Attribute('accesskey', 'Активация ссылки с помощью комбинации клавиш.'),
            new Attribute('coords', 'Устанавливает координаты активной области.'),
            new Attribute('download', 'Предлагает скачать указанный по ссылке файл.')
        ]
    )
;

console.log(a);

// -div

const div = new Tag(
    'div',
    'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения' +
    ' вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри' +
    ' тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.' +
    'Как и при использовании других блочных элементов, содержимое тега <div> всегда начинается с новой строки.' +
    ' После него также добавляется перенос строки.',
    [
        new Attribute('align', 'Задает выравнивание содержимого тега <div>.'),
        new Attribute('title', 'Добавляет всплывающую подсказку к содержимому.')
    ]
);

console.log(div);

// -h1

const h1 = new Tag(
    'h1',
    'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции,' +
    ' расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня,' +
    ' а тег <h6> служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию,' +
    ' заголовок первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по' +
    ' размеру меньше. Теги <h1>,...,<h6> относятся к блочным элементам, они всегда начинаются с новой строки, а после' +
    ' них другие элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое' +
    ' пространство.',
    [new Attribute('align', 'Определяет выравнивание заголовка.')]
);

console.log(h1);

// -span

const span = new Tag(
    'span',
    'Тег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов,' +
    ' таких как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и' +
    ' установить для нее свой стиль. Например, внутри абзаца (тега <p>) можно изменить цвет и размер первой буквы,' +
    ' если добавить начальный и конечный тег <span> и определить для него стиль текста. Чтобы не описывать каждый раз' +
    ' стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с' +
    ' именем селектора.',
    'Для этого тега доступны универсальные атрибуты и события.'
);

console.log(span);

// -input

const input = new Tag(
    'input',
    'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса' +
    ' и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей,' +
    ' различных кнопок, переключателей и флажков. Хотя элемент <input> не требуется помещать внутрь контейнера <form>,' +
    ' определяющего форму, но если введенные пользователем данные должны быть отправлены на сервер, где их обрабатывает' +
    ' серверная программа, то указывать <form> обязательно. То же самое обстоит и в случае обработки данных с помощью ' +
    ' клиентских приложений, например, скриптов на языке JavaScript.' +
    ' Основной атрибут тега <input>, определяющий вид элемента — type. Он позволяет задавать следующие элементы формы:' +
    ' текстовое поле (text), поле с паролем (password), переключатель (radio), флажок (checkbox), скрытое поле (hidden),' +
    ' кнопка (button), кнопка для отправки формы (submit), кнопка для очистки формы (reset), поле для отправки файла' +
    ' (file) и кнопка с изображением (image). Для каждого элемента существует свой список атрибутов, которые определяют' +
    ' его вид и характеристики. Кроме того, в HTML5 добавлено еще более десятка новых элементов',
    [
        new Attribute('accept',
            'Устанавливает фильтр на типы файлов, которые вы можете отправить через поле загрузки файлов.'),
        new Attribute('alt', 'Альтернативный текст для кнопки с изображением.'),
        new Attribute('type', 'Сообщает браузеру, к какому типу относится элемент формы.')
    ]
);

console.log(input);

// -form

const form = new Tag(
    'form',
    'Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и' +
    ' сервером. Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно' +
    ' получить доступ к любому элементу формы, изменять его и применять по своему усмотрению.' +
    ' Документ может содержать любое количество форм, но одновременно на сервер может быть отправлена только одна форма.' +
    ' По этой причине данные форм должны быть независимы друг от друга.\n' +
    ' Для отправки формы на сервер используется кнопка Submit, того же можно добиться, если нажать клавишу Enter в' +
    ' пределах формы. Если кнопка Submit отсутствует в форме, клавиша Enter имитирует ее использование.\n' +
    ' Когда форма отправляется на сервер, управление данными передается программе, заданной атрибутом action тега <form>.' +
    ' Предварительно браузер подготавливает информацию в виде пары «имя=значение», где имя определяется атрибутом name' +
    ' тега <input>, а значение введено пользователем или установлено в поле формы по умолчанию. Если для отправки данных' +
    ' используется метод GET, то адресная строка может принимать следующий вид.\n' +
    ' http://www.htmlbook.ru/cgi-bin/handler.cgi?nick=%C2%E0%ED%FF+%D8%E0%EF%EE%F7%EA%E8%ED&page=5\n' +
    ' Параметры перечисляются после вопросительного знака, указанного после адреса CGI-программы и разделяются между' +
    ' собой символом амперсанда (&). Нелатинские символы преобразуются в шестнадцатеричное представление (в форме %HH,' +
    ' где HH — шестнадцатеричный код для значения ASCII-символа), пробел заменяется на плюс (+).\n' +
    ' Допускается внутрь контейнера <form> помещать другие теги, при этом сама форма никак не отображается на' +
    ' веб-странице, видны только ее элементы и результаты вложенных тегов.',
    [
        new Attribute('action', 'Адрес программы или документа, который обрабатывает данные формы.'),
        new Attribute('enctype', 'Способ кодирования данных формы.'),
        new Attribute('novalidate', 'Отменяет встроенную проверку данных формы на корректность ввода.')
    ]
);

console.log(form);

// -option

const option = new Tag(
    'option',
    'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. Ширина списка' +
    ' определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Если' +
    ' планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также' +
    ' необходимо, когда к данным списка идет обращение через скрипты.',
    [
        new Attribute('disabled', 'Заблокировать для доступа элемент списка.'),
        new Attribute('label', 'Указание метки пункта списка.'),
        new Attribute('selected', 'Заранее устанавливает определенный пункт списка выделенным.'),
    ]
);

console.log(option);

// -select

const select = new Tag(
    'select',
    'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или' +
    ' множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега <select>,' +
    ' который устанавливает высоту списка. Ширина списка определяется самым широким текстом, указанным в теге <option>,' +
    ' а также может изменяться с помощью стилей. Каждый пункт создается с помощью тега <option>, который должен быть' +
    ' вложен в контейнер <select>. Если планируется отправлять данные списка на сервер, то требуется поместить элемент' +
    ' <select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
    [
        new Attribute('size','Количество отображаемых строк списка.'),
        new Attribute('multiple','Позволяет одновременно выбирать сразу несколько элементов списка.')
    ]
);

console.log(select);